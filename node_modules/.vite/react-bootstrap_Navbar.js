import {
  NavbarContext_default,
  SelectableContext_default,
  dataAttr,
  qsa
} from "./chunk-GR3GR5IC.js";
import {
  CloseButton_default,
  ENTERED,
  ENTERING,
  EXITED,
  EXITING,
  Fade_default,
  TransitionWrapper_default,
  canUseDOM_default,
  css_default,
  divWithClassName_default,
  listen_default,
  ownerDocument,
  transitionEndListener,
  triggerBrowserReflow
} from "./chunk-DFSPSY3P.js";
import {
  useEventCallback,
  useIsomorphicEffect_default,
  useMounted,
  usePrevious,
  useUncontrolled
} from "./chunk-4DLB5EML.js";
import {
  createWithBsPrefix
} from "./chunk-ILKYH63D.js";
import {
  require_classnames,
  require_jsx_runtime,
  useBootstrapPrefix
} from "./chunk-NN6QP624.js";
import {
  require_react_dom
} from "./chunk-XGNC7RWJ.js";
import "./chunk-O5RXLMPQ.js";
import {
  require_react
} from "./chunk-RGZI4N5W.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues,
  __toModule
} from "./chunk-GXEXT4XK.js";

// node_modules/react-bootstrap/esm/Navbar.js
var import_classnames7 = __toModule(require_classnames());
var React12 = __toModule(require_react());
var import_react14 = __toModule(require_react());

// node_modules/react-bootstrap/esm/NavbarBrand.js
var import_classnames = __toModule(require_classnames());
var React = __toModule(require_react());
var import_jsx_runtime = __toModule(require_jsx_runtime());
var NavbarBrand = React.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-brand");
  const Component = as || (props.href ? "a" : "span");
  return (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames.default)(className, bsPrefix)
  }));
});
NavbarBrand.displayName = "NavbarBrand";
var NavbarBrand_default = NavbarBrand;

// node_modules/react-bootstrap/esm/NavbarCollapse.js
var React3 = __toModule(require_react());
var import_react2 = __toModule(require_react());

// node_modules/react-bootstrap/esm/Collapse.js
var import_classnames2 = __toModule(require_classnames());
var import_react = __toModule(require_react());

// node_modules/react-bootstrap/esm/createChainedFunction.js
function createChainedFunction(...funcs) {
  return funcs.filter((f) => f != null).reduce((acc, f) => {
    if (typeof f !== "function") {
      throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");
    }
    if (acc === null)
      return f;
    return function chainedFunction(...args) {
      acc.apply(this, args);
      f.apply(this, args);
    };
  }, null);
}
var createChainedFunction_default = createChainedFunction;

// node_modules/react-bootstrap/esm/Collapse.js
var import_jsx_runtime2 = __toModule(require_jsx_runtime());
var MARGINS = {
  height: ["marginTop", "marginBottom"],
  width: ["marginLeft", "marginRight"]
};
function getDefaultDimensionValue(dimension, elem) {
  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
  const value = elem[offset];
  const margins = MARGINS[dimension];
  return value + parseInt(css_default(elem, margins[0]), 10) + parseInt(css_default(elem, margins[1]), 10);
}
var collapseStyles = {
  [EXITED]: "collapse",
  [EXITING]: "collapsing",
  [ENTERING]: "collapsing",
  [ENTERED]: "collapse show"
};
var defaultProps = {
  in: false,
  timeout: 300,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  getDimensionValue: getDefaultDimensionValue
};
var Collapse = import_react.default.forwardRef((_a, ref) => {
  var _b = _a, {
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    className,
    children,
    dimension = "height",
    getDimensionValue = getDefaultDimensionValue
  } = _b, props = __objRest(_b, [
    "onEnter",
    "onEntering",
    "onEntered",
    "onExit",
    "onExiting",
    "className",
    "children",
    "dimension",
    "getDimensionValue"
  ]);
  const computedDimension = typeof dimension === "function" ? dimension() : dimension;
  const handleEnter = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = "0";
  }, onEnter), [computedDimension, onEnter]);
  const handleEntering = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
    elem.style[computedDimension] = `${elem[scroll]}px`;
  }, onEntering), [computedDimension, onEntering]);
  const handleEntered = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = null;
  }, onEntered), [computedDimension, onEntered]);
  const handleExit = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
    triggerBrowserReflow(elem);
  }, onExit), [onExit, getDimensionValue, computedDimension]);
  const handleExiting = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = null;
  }, onExiting), [computedDimension, onExiting]);
  return (0, import_jsx_runtime2.jsx)(TransitionWrapper_default, __spreadProps(__spreadValues({
    ref,
    addEndListener: transitionEndListener
  }, props), {
    "aria-expanded": props.role ? props.in : null,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onEntered: handleEntered,
    onExit: handleExit,
    onExiting: handleExiting,
    childRef: children.ref,
    children: (state, innerProps) => import_react.default.cloneElement(children, __spreadProps(__spreadValues({}, innerProps), {
      className: (0, import_classnames2.default)(className, children.props.className, collapseStyles[state], computedDimension === "width" && "collapse-horizontal")
    }))
  }));
});
Collapse.defaultProps = defaultProps;
var Collapse_default = Collapse;

// node_modules/react-bootstrap/esm/NavbarCollapse.js
var import_jsx_runtime3 = __toModule(require_jsx_runtime());
var NavbarCollapse = React3.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    bsPrefix
  } = _b, props = __objRest(_b, [
    "children",
    "bsPrefix"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-collapse");
  const context = (0, import_react2.useContext)(NavbarContext_default);
  return (0, import_jsx_runtime3.jsx)(Collapse_default, __spreadProps(__spreadValues({
    in: !!(context && context.expanded)
  }, props), {
    children: (0, import_jsx_runtime3.jsx)("div", {
      ref,
      className: bsPrefix,
      children
    })
  }));
});
NavbarCollapse.displayName = "NavbarCollapse";
var NavbarCollapse_default = NavbarCollapse;

// node_modules/react-bootstrap/esm/NavbarToggle.js
var import_classnames3 = __toModule(require_classnames());
var React4 = __toModule(require_react());
var import_react3 = __toModule(require_react());
var import_jsx_runtime4 = __toModule(require_jsx_runtime());
var defaultProps2 = {
  label: "Toggle navigation"
};
var NavbarToggle = React4.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    label,
    as: Component = "button",
    onClick
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "label",
    "as",
    "onClick"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-toggler");
  const {
    onToggle,
    expanded
  } = (0, import_react3.useContext)(NavbarContext_default) || {};
  const handleClick = useEventCallback((e) => {
    if (onClick)
      onClick(e);
    if (onToggle)
      onToggle();
  });
  if (Component === "button") {
    props.type = "button";
  }
  return (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    onClick: handleClick,
    "aria-label": label,
    className: (0, import_classnames3.default)(className, bsPrefix, !expanded && "collapsed"),
    children: children || (0, import_jsx_runtime4.jsx)("span", {
      className: `${bsPrefix}-icon`
    })
  }));
});
NavbarToggle.displayName = "NavbarToggle";
NavbarToggle.defaultProps = defaultProps2;
var NavbarToggle_default = NavbarToggle;

// node_modules/react-bootstrap/esm/NavbarOffcanvas.js
var React11 = __toModule(require_react());
var import_react13 = __toModule(require_react());

// node_modules/react-bootstrap/esm/Offcanvas.js
var import_classnames6 = __toModule(require_classnames());

// node_modules/@restart/hooks/esm/useMediaQuery.js
var import_react4 = __toModule(require_react());
var matchersByWindow = new WeakMap();
var getMatcher = function getMatcher2(query, targetWindow) {
  if (!query || !targetWindow)
    return void 0;
  var matchers = matchersByWindow.get(targetWindow) || new Map();
  matchersByWindow.set(targetWindow, matchers);
  var mql = matchers.get(query);
  if (!mql) {
    mql = targetWindow.matchMedia(query);
    mql.refCount = 0;
    matchers.set(mql.media, mql);
  }
  return mql;
};
function useMediaQuery(query, targetWindow) {
  if (targetWindow === void 0) {
    targetWindow = typeof window === "undefined" ? void 0 : window;
  }
  var mql = getMatcher(query, targetWindow);
  var _useState = (0, import_react4.useState)(function() {
    return mql ? mql.matches : false;
  }), matches = _useState[0], setMatches = _useState[1];
  useIsomorphicEffect_default(function() {
    var mql2 = getMatcher(query, targetWindow);
    if (!mql2) {
      return setMatches(false);
    }
    var matchers = matchersByWindow.get(targetWindow);
    var handleChange = function handleChange2() {
      setMatches(mql2.matches);
    };
    mql2.refCount++;
    mql2.addListener(handleChange);
    handleChange();
    return function() {
      mql2.removeListener(handleChange);
      mql2.refCount--;
      if (mql2.refCount <= 0) {
        matchers == null ? void 0 : matchers.delete(mql2.media);
      }
      mql2 = void 0;
    };
  }, [query]);
  return matches;
}

// node_modules/@restart/hooks/esm/useBreakpoint.js
var import_react5 = __toModule(require_react());
function createBreakpointHook(breakpointValues) {
  var names = Object.keys(breakpointValues);
  function and(query, next) {
    if (query === next) {
      return next;
    }
    return query ? query + " and " + next : next;
  }
  function getNext(breakpoint) {
    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];
  }
  function getMaxQuery(breakpoint) {
    var next = getNext(breakpoint);
    var value = breakpointValues[next];
    if (typeof value === "number")
      value = value - 0.2 + "px";
    else
      value = "calc(" + value + " - 0.2px)";
    return "(max-width: " + value + ")";
  }
  function getMinQuery(breakpoint) {
    var value = breakpointValues[breakpoint];
    if (typeof value === "number") {
      value = value + "px";
    }
    return "(min-width: " + value + ")";
  }
  function useBreakpoint2(breakpointOrMap, direction, window2) {
    var breakpointMap;
    if (typeof breakpointOrMap === "object") {
      breakpointMap = breakpointOrMap;
      window2 = direction;
      direction = true;
    } else {
      var _breakpointMap;
      direction = direction || true;
      breakpointMap = (_breakpointMap = {}, _breakpointMap[breakpointOrMap] = direction, _breakpointMap);
    }
    var query = (0, import_react5.useMemo)(function() {
      return Object.entries(breakpointMap).reduce(function(query2, _ref) {
        var key = _ref[0], direction2 = _ref[1];
        if (direction2 === "up" || direction2 === true) {
          query2 = and(query2, getMinQuery(key));
        }
        if (direction2 === "down" || direction2 === true) {
          query2 = and(query2, getMaxQuery(key));
        }
        return query2;
      }, "");
    }, [JSON.stringify(breakpointMap)]);
    return useMediaQuery(query, window2);
  }
  return useBreakpoint2;
}
var useBreakpoint = createBreakpointHook({
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1400
});
var useBreakpoint_default = useBreakpoint;

// node_modules/react-bootstrap/esm/Offcanvas.js
var React10 = __toModule(require_react());
var import_react12 = __toModule(require_react());

// node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName)
      return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}

// node_modules/dom-helpers/esm/contains.js
function contains(context, node) {
  if (context.contains)
    return context.contains(node);
  if (context.compareDocumentPosition)
    return context === node || !!(context.compareDocumentPosition(node) & 16);
}

// node_modules/@restart/ui/esm/Modal.js
var import_react10 = __toModule(require_react());
var React5 = __toModule(require_react());
var import_react_dom = __toModule(require_react_dom());

// node_modules/@restart/hooks/esm/useUpdatedRef.js
var import_react6 = __toModule(require_react());
function useUpdatedRef(value) {
  var valueRef = (0, import_react6.useRef)(value);
  valueRef.current = value;
  return valueRef;
}

// node_modules/@restart/hooks/esm/useWillUnmount.js
var import_react7 = __toModule(require_react());
function useWillUnmount(fn) {
  var onUnmount = useUpdatedRef(fn);
  (0, import_react7.useEffect)(function() {
    return function() {
      return onUnmount.current();
    };
  }, []);
}

// node_modules/@restart/ui/esm/getScrollbarWidth.js
function getBodyScrollbarWidth(ownerDocument2 = document) {
  const window2 = ownerDocument2.defaultView;
  return Math.abs(window2.innerWidth - ownerDocument2.documentElement.clientWidth);
}

// node_modules/@restart/ui/esm/ModalManager.js
var OPEN_DATA_ATTRIBUTE = dataAttr("modal-open");
var ModalManager = class {
  constructor({
    ownerDocument: ownerDocument2,
    handleContainerOverflow = true,
    isRTL = false
  } = {}) {
    this.handleContainerOverflow = handleContainerOverflow;
    this.isRTL = isRTL;
    this.modals = [];
    this.ownerDocument = ownerDocument2;
  }
  getScrollbarWidth() {
    return getBodyScrollbarWidth(this.ownerDocument);
  }
  getElement() {
    return (this.ownerDocument || document).body;
  }
  setModalAttributes(_modal) {
  }
  removeModalAttributes(_modal) {
  }
  setContainerStyle(containerState) {
    const style = {
      overflow: "hidden"
    };
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const container = this.getElement();
    containerState.style = {
      overflow: container.style.overflow,
      [paddingProp]: container.style[paddingProp]
    };
    if (containerState.scrollBarWidth) {
      style[paddingProp] = `${parseInt(css_default(container, paddingProp) || "0", 10) + containerState.scrollBarWidth}px`;
    }
    container.setAttribute(OPEN_DATA_ATTRIBUTE, "");
    css_default(container, style);
  }
  reset() {
    [...this.modals].forEach((m) => this.remove(m));
  }
  removeContainerStyle(containerState) {
    const container = this.getElement();
    container.removeAttribute(OPEN_DATA_ATTRIBUTE);
    Object.assign(container.style, containerState.style);
  }
  add(modal) {
    let modalIdx = this.modals.indexOf(modal);
    if (modalIdx !== -1) {
      return modalIdx;
    }
    modalIdx = this.modals.length;
    this.modals.push(modal);
    this.setModalAttributes(modal);
    if (modalIdx !== 0) {
      return modalIdx;
    }
    this.state = {
      scrollBarWidth: this.getScrollbarWidth(),
      style: {}
    };
    if (this.handleContainerOverflow) {
      this.setContainerStyle(this.state);
    }
    return modalIdx;
  }
  remove(modal) {
    const modalIdx = this.modals.indexOf(modal);
    if (modalIdx === -1) {
      return;
    }
    this.modals.splice(modalIdx, 1);
    if (!this.modals.length && this.handleContainerOverflow) {
      this.removeContainerStyle(this.state);
    }
    this.removeModalAttributes(modal);
  }
  isTopModal(modal) {
    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
  }
};
var ModalManager_default = ModalManager;

// node_modules/@restart/ui/esm/useWaitForDOMRef.js
var import_react9 = __toModule(require_react());

// node_modules/@restart/ui/esm/useWindow.js
var import_react8 = __toModule(require_react());
var Context = (0, import_react8.createContext)(canUseDOM_default ? window : void 0);
var WindowProvider = Context.Provider;
function useWindow() {
  return (0, import_react8.useContext)(Context);
}

// node_modules/@restart/ui/esm/useWaitForDOMRef.js
var resolveContainerRef = (ref, document2) => {
  if (!canUseDOM_default)
    return null;
  if (ref == null)
    return (document2 || ownerDocument()).body;
  if (typeof ref === "function")
    ref = ref();
  if (ref && "current" in ref)
    ref = ref.current;
  if (ref && ("nodeType" in ref || ref.getBoundingClientRect))
    return ref;
  return null;
};
function useWaitForDOMRef(ref, onResolved) {
  const window2 = useWindow();
  const [resolvedRef, setRef] = (0, import_react9.useState)(() => resolveContainerRef(ref, window2 == null ? void 0 : window2.document));
  if (!resolvedRef) {
    const earlyRef = resolveContainerRef(ref);
    if (earlyRef)
      setRef(earlyRef);
  }
  (0, import_react9.useEffect)(() => {
    if (onResolved && resolvedRef) {
      onResolved(resolvedRef);
    }
  }, [onResolved, resolvedRef]);
  (0, import_react9.useEffect)(() => {
    const nextRef = resolveContainerRef(ref);
    if (nextRef !== resolvedRef) {
      setRef(nextRef);
    }
  }, [ref, resolvedRef]);
  return resolvedRef;
}

// node_modules/@restart/ui/esm/Modal.js
var import_jsx_runtime5 = __toModule(require_jsx_runtime());
var import_jsx_runtime6 = __toModule(require_jsx_runtime());
var import_jsx_runtime7 = __toModule(require_jsx_runtime());
var _excluded = ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "backdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var manager;
function getManager(window2) {
  if (!manager)
    manager = new ModalManager_default({
      ownerDocument: window2 == null ? void 0 : window2.document
    });
  return manager;
}
function useModalManager(provided) {
  const window2 = useWindow();
  const modalManager = provided || getManager(window2);
  const modal = (0, import_react10.useRef)({
    dialog: null,
    backdrop: null
  });
  return Object.assign(modal.current, {
    add: () => modalManager.add(modal.current),
    remove: () => modalManager.remove(modal.current),
    isTopModal: () => modalManager.isTopModal(modal.current),
    setDialogRef: (0, import_react10.useCallback)((ref) => {
      modal.current.dialog = ref;
    }, []),
    setBackdropRef: (0, import_react10.useCallback)((ref) => {
      modal.current.backdrop = ref;
    }, [])
  });
}
var Modal = (0, import_react10.forwardRef)((_ref, ref) => {
  let {
    show = false,
    role = "dialog",
    className,
    style,
    children,
    backdrop = true,
    keyboard = true,
    onBackdropClick,
    onEscapeKeyDown,
    transition,
    backdropTransition,
    autoFocus = true,
    enforceFocus = true,
    restoreFocus = true,
    restoreFocusOptions,
    renderDialog,
    renderBackdrop = (props) => (0, import_jsx_runtime5.jsx)("div", Object.assign({}, props)),
    manager: providedManager,
    container: containerRef,
    onShow,
    onHide = () => {
    },
    onExit,
    onExited,
    onExiting,
    onEnter,
    onEntering,
    onEntered
  } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  const container = useWaitForDOMRef(containerRef);
  const modal = useModalManager(providedManager);
  const isMounted = useMounted();
  const prevShow = usePrevious(show);
  const [exited, setExited] = (0, import_react10.useState)(!show);
  const lastFocusRef = (0, import_react10.useRef)(null);
  (0, import_react10.useImperativeHandle)(ref, () => modal, [modal]);
  if (canUseDOM_default && !prevShow && show) {
    lastFocusRef.current = activeElement();
  }
  if (!transition && !show && !exited) {
    setExited(true);
  } else if (show && exited) {
    setExited(false);
  }
  const handleShow = useEventCallback(() => {
    modal.add();
    removeKeydownListenerRef.current = listen_default(document, "keydown", handleDocumentKeyDown);
    removeFocusListenerRef.current = listen_default(document, "focus", () => setTimeout(handleEnforceFocus), true);
    if (onShow) {
      onShow();
    }
    if (autoFocus) {
      const currentActiveElement = activeElement(document);
      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
        lastFocusRef.current = currentActiveElement;
        modal.dialog.focus();
      }
    }
  });
  const handleHide = useEventCallback(() => {
    modal.remove();
    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();
    if (restoreFocus) {
      var _lastFocusRef$current;
      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
      lastFocusRef.current = null;
    }
  });
  (0, import_react10.useEffect)(() => {
    if (!show || !container)
      return;
    handleShow();
  }, [
    show,
    container,
    handleShow
  ]);
  (0, import_react10.useEffect)(() => {
    if (!exited)
      return;
    handleHide();
  }, [exited, handleHide]);
  useWillUnmount(() => {
    handleHide();
  });
  const handleEnforceFocus = useEventCallback(() => {
    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
      return;
    }
    const currentActiveElement = activeElement();
    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
      modal.dialog.focus();
    }
  });
  const handleBackdropClick = useEventCallback((e) => {
    if (e.target !== e.currentTarget) {
      return;
    }
    onBackdropClick == null ? void 0 : onBackdropClick(e);
    if (backdrop === true) {
      onHide();
    }
  });
  const handleDocumentKeyDown = useEventCallback((e) => {
    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);
      if (!e.defaultPrevented) {
        onHide();
      }
    }
  });
  const removeFocusListenerRef = (0, import_react10.useRef)();
  const removeKeydownListenerRef = (0, import_react10.useRef)();
  const handleHidden = (...args) => {
    setExited(true);
    onExited == null ? void 0 : onExited(...args);
  };
  const Transition = transition;
  if (!container || !(show || Transition && !exited)) {
    return null;
  }
  const dialogProps = Object.assign({
    role,
    ref: modal.setDialogRef,
    "aria-modal": role === "dialog" ? true : void 0
  }, rest, {
    style,
    className,
    tabIndex: -1
  });
  let dialog = renderDialog ? renderDialog(dialogProps) : (0, import_jsx_runtime5.jsx)("div", Object.assign({}, dialogProps, {
    children: React5.cloneElement(children, {
      role: "document"
    })
  }));
  if (Transition) {
    dialog = (0, import_jsx_runtime5.jsx)(Transition, {
      appear: true,
      unmountOnExit: true,
      in: !!show,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered,
      children: dialog
    });
  }
  let backdropElement = null;
  if (backdrop) {
    const BackdropTransition2 = backdropTransition;
    backdropElement = renderBackdrop({
      ref: modal.setBackdropRef,
      onClick: handleBackdropClick
    });
    if (BackdropTransition2) {
      backdropElement = (0, import_jsx_runtime5.jsx)(BackdropTransition2, {
        appear: true,
        in: !!show,
        children: backdropElement
      });
    }
  }
  return (0, import_jsx_runtime5.jsx)(import_jsx_runtime6.Fragment, {
    children: import_react_dom.default.createPortal((0, import_jsx_runtime7.jsxs)(import_jsx_runtime6.Fragment, {
      children: [backdropElement, dialog]
    }), container)
  });
});
Modal.displayName = "Modal";
var Modal_default = Object.assign(Modal, {
  Manager: ModalManager_default
});

// node_modules/react-bootstrap/esm/OffcanvasBody.js
var OffcanvasBody_default = createWithBsPrefix("offcanvas-body");

// node_modules/react-bootstrap/esm/OffcanvasToggling.js
var import_classnames4 = __toModule(require_classnames());
var React6 = __toModule(require_react());
var import_jsx_runtime8 = __toModule(require_jsx_runtime());
var defaultProps3 = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false
};
var transitionStyles = {
  [ENTERING]: "show",
  [ENTERED]: "show"
};
var OffcanvasToggling = React6.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
  return (0, import_jsx_runtime8.jsx)(TransitionWrapper_default, __spreadProps(__spreadValues({
    ref,
    addEndListener: transitionEndListener
  }, props), {
    childRef: children.ref,
    children: (status, innerProps) => React6.cloneElement(children, __spreadProps(__spreadValues({}, innerProps), {
      className: (0, import_classnames4.default)(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])
    }))
  }));
});
OffcanvasToggling.defaultProps = defaultProps3;
OffcanvasToggling.displayName = "OffcanvasToggling";
var OffcanvasToggling_default = OffcanvasToggling;

// node_modules/react-bootstrap/esm/ModalContext.js
var React7 = __toModule(require_react());
var ModalContext = React7.createContext({
  onHide() {
  }
});
var ModalContext_default = ModalContext;

// node_modules/react-bootstrap/esm/OffcanvasHeader.js
var import_classnames5 = __toModule(require_classnames());
var React9 = __toModule(require_react());

// node_modules/react-bootstrap/esm/AbstractModalHeader.js
var React8 = __toModule(require_react());
var import_react11 = __toModule(require_react());
var import_jsx_runtime9 = __toModule(require_jsx_runtime());
var import_jsx_runtime10 = __toModule(require_jsx_runtime());
var defaultProps4 = {
  closeLabel: "Close",
  closeButton: false
};
var AbstractModalHeader = React8.forwardRef((_a, ref) => {
  var _b = _a, {
    closeLabel,
    closeVariant,
    closeButton,
    onHide,
    children
  } = _b, props = __objRest(_b, [
    "closeLabel",
    "closeVariant",
    "closeButton",
    "onHide",
    "children"
  ]);
  const context = (0, import_react11.useContext)(ModalContext_default);
  const handleClick = useEventCallback(() => {
    context == null ? void 0 : context.onHide();
    onHide == null ? void 0 : onHide();
  });
  return (0, import_jsx_runtime10.jsxs)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    children: [children, closeButton && (0, import_jsx_runtime9.jsx)(CloseButton_default, {
      "aria-label": closeLabel,
      variant: closeVariant,
      onClick: handleClick
    })]
  }));
});
AbstractModalHeader.defaultProps = defaultProps4;
var AbstractModalHeader_default = AbstractModalHeader;

// node_modules/react-bootstrap/esm/OffcanvasHeader.js
var import_jsx_runtime11 = __toModule(require_jsx_runtime());
var defaultProps5 = {
  closeLabel: "Close",
  closeButton: false
};
var OffcanvasHeader = React9.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas-header");
  return (0, import_jsx_runtime11.jsx)(AbstractModalHeader_default, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames5.default)(className, bsPrefix)
  }));
});
OffcanvasHeader.displayName = "OffcanvasHeader";
OffcanvasHeader.defaultProps = defaultProps5;
var OffcanvasHeader_default = OffcanvasHeader;

// node_modules/react-bootstrap/esm/OffcanvasTitle.js
var DivStyledAsH5 = divWithClassName_default("h5");
var OffcanvasTitle_default = createWithBsPrefix("offcanvas-title", {
  Component: DivStyledAsH5
});

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-bootstrap/esm/BootstrapModalManager.js
var Selector = {
  FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
  STICKY_CONTENT: ".sticky-top",
  NAVBAR_TOGGLER: ".navbar-toggler"
};
var BootstrapModalManager = class extends ModalManager_default {
  adjustAndStore(prop, element, adjust) {
    const actual = element.style[prop];
    element.dataset[prop] = actual;
    css_default(element, {
      [prop]: `${parseFloat(css_default(element, prop)) + adjust}px`
    });
  }
  restore(prop, element) {
    const value = element.dataset[prop];
    if (value !== void 0) {
      delete element.dataset[prop];
      css_default(element, {
        [prop]: value
      });
    }
  }
  setContainerStyle(containerState) {
    super.setContainerStyle(containerState);
    const container = this.getElement();
    addClass(container, "modal-open");
    if (!containerState.scrollBarWidth)
      return;
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const marginProp = this.isRTL ? "marginLeft" : "marginRight";
    qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));
    qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));
    qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));
  }
  removeContainerStyle(containerState) {
    super.removeContainerStyle(containerState);
    const container = this.getElement();
    removeClass(container, "modal-open");
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const marginProp = this.isRTL ? "marginLeft" : "marginRight";
    qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.restore(paddingProp, el));
    qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.restore(marginProp, el));
    qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.restore(marginProp, el));
  }
};
var sharedManager;
function getSharedManager(options) {
  if (!sharedManager)
    sharedManager = new BootstrapModalManager(options);
  return sharedManager;
}
var BootstrapModalManager_default = BootstrapModalManager;

// node_modules/react-bootstrap/esm/Offcanvas.js
var import_jsx_runtime12 = __toModule(require_jsx_runtime());
var import_jsx_runtime13 = __toModule(require_jsx_runtime());
var import_jsx_runtime14 = __toModule(require_jsx_runtime());
var defaultProps6 = {
  show: false,
  backdrop: true,
  keyboard: true,
  scroll: false,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  placement: "start",
  renderStaticNode: false
};
function DialogTransition(props) {
  return (0, import_jsx_runtime12.jsx)(OffcanvasToggling_default, __spreadValues({}, props));
}
function BackdropTransition(props) {
  return (0, import_jsx_runtime12.jsx)(Fade_default, __spreadValues({}, props));
}
var Offcanvas = React10.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    "aria-labelledby": ariaLabelledby,
    placement,
    responsive,
    show,
    backdrop,
    keyboard,
    scroll,
    onEscapeKeyDown,
    onShow,
    onHide,
    container,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onEntered,
    onExit,
    onExiting,
    onEnter,
    onEntering,
    onExited,
    backdropClassName,
    manager: propsManager,
    renderStaticNode
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "aria-labelledby",
    "placement",
    "responsive",
    "show",
    "backdrop",
    "keyboard",
    "scroll",
    "onEscapeKeyDown",
    "onShow",
    "onHide",
    "container",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "onEntered",
    "onExit",
    "onExiting",
    "onEnter",
    "onEntering",
    "onExited",
    "backdropClassName",
    "manager",
    "renderStaticNode"
  ]);
  const modalManager = (0, import_react12.useRef)();
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
  const {
    onToggle
  } = (0, import_react12.useContext)(NavbarContext_default) || {};
  const [showOffcanvas, setShowOffcanvas] = (0, import_react12.useState)(false);
  const hideResponsiveOffcanvas = useBreakpoint_default(responsive || "xs", "up");
  (0, import_react12.useEffect)(() => {
    setShowOffcanvas(responsive ? show && !hideResponsiveOffcanvas : show);
  }, [show, responsive, hideResponsiveOffcanvas]);
  const handleHide = useEventCallback(() => {
    onToggle == null ? void 0 : onToggle();
    onHide == null ? void 0 : onHide();
  });
  const modalContext = (0, import_react12.useMemo)(() => ({
    onHide: handleHide
  }), [handleHide]);
  function getModalManager() {
    if (propsManager)
      return propsManager;
    if (scroll) {
      if (!modalManager.current)
        modalManager.current = new BootstrapModalManager_default({
          handleContainerOverflow: false
        });
      return modalManager.current;
    }
    return getSharedManager();
  }
  const handleEnter = (node, ...args) => {
    if (node)
      node.style.visibility = "visible";
    onEnter == null ? void 0 : onEnter(node, ...args);
  };
  const handleExited = (node, ...args) => {
    if (node)
      node.style.visibility = "";
    onExited == null ? void 0 : onExited(...args);
  };
  const renderBackdrop = (0, import_react12.useCallback)((backdropProps) => (0, import_jsx_runtime12.jsx)("div", __spreadProps(__spreadValues({}, backdropProps), {
    className: (0, import_classnames6.default)(`${bsPrefix}-backdrop`, backdropClassName)
  })), [backdropClassName, bsPrefix]);
  const renderDialog = (dialogProps) => (0, import_jsx_runtime12.jsx)("div", __spreadProps(__spreadValues(__spreadValues({}, dialogProps), props), {
    className: (0, import_classnames6.default)(className, responsive ? `${bsPrefix}-${responsive}` : bsPrefix, `${bsPrefix}-${placement}`),
    "aria-labelledby": ariaLabelledby,
    children
  }));
  return (0, import_jsx_runtime14.jsxs)(import_jsx_runtime13.Fragment, {
    children: [!showOffcanvas && (responsive || renderStaticNode) && renderDialog({}), (0, import_jsx_runtime12.jsx)(ModalContext_default.Provider, {
      value: modalContext,
      children: (0, import_jsx_runtime12.jsx)(Modal_default, {
        show: showOffcanvas,
        ref,
        backdrop,
        container,
        keyboard,
        autoFocus,
        enforceFocus: enforceFocus && !scroll,
        restoreFocus,
        restoreFocusOptions,
        onEscapeKeyDown,
        onShow,
        onHide: handleHide,
        onEnter: handleEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited: handleExited,
        manager: getModalManager(),
        transition: DialogTransition,
        backdropTransition: BackdropTransition,
        renderBackdrop,
        renderDialog
      })
    })]
  });
});
Offcanvas.displayName = "Offcanvas";
Offcanvas.defaultProps = defaultProps6;
var Offcanvas_default = Object.assign(Offcanvas, {
  Body: OffcanvasBody_default,
  Header: OffcanvasHeader_default,
  Title: OffcanvasTitle_default
});

// node_modules/react-bootstrap/esm/NavbarOffcanvas.js
var import_jsx_runtime15 = __toModule(require_jsx_runtime());
var NavbarOffcanvas = React11.forwardRef((props, ref) => {
  const context = (0, import_react13.useContext)(NavbarContext_default);
  return (0, import_jsx_runtime15.jsx)(Offcanvas_default, __spreadProps(__spreadValues({
    ref,
    show: !!(context != null && context.expanded)
  }, props), {
    renderStaticNode: true
  }));
});
NavbarOffcanvas.displayName = "NavbarOffcanvas";
var NavbarOffcanvas_default = NavbarOffcanvas;

// node_modules/react-bootstrap/esm/Navbar.js
var import_jsx_runtime16 = __toModule(require_jsx_runtime());
var NavbarText = createWithBsPrefix("navbar-text", {
  Component: "span"
});
var defaultProps7 = {
  expand: true,
  variant: "light",
  collapseOnSelect: false
};
var Navbar = React12.forwardRef((props, ref) => {
  const _a = useUncontrolled(props, {
    expanded: "onToggle"
  }), {
    bsPrefix: initialBsPrefix,
    expand,
    variant,
    bg,
    fixed,
    sticky,
    className,
    as: Component = "nav",
    expanded,
    onToggle,
    onSelect,
    collapseOnSelect
  } = _a, controlledProps = __objRest(_a, [
    "bsPrefix",
    "expand",
    "variant",
    "bg",
    "fixed",
    "sticky",
    "className",
    "as",
    "expanded",
    "onToggle",
    "onSelect",
    "collapseOnSelect"
  ]);
  const bsPrefix = useBootstrapPrefix(initialBsPrefix, "navbar");
  const handleCollapse = (0, import_react14.useCallback)((...args) => {
    onSelect == null ? void 0 : onSelect(...args);
    if (collapseOnSelect && expanded) {
      onToggle == null ? void 0 : onToggle(false);
    }
  }, [onSelect, collapseOnSelect, expanded, onToggle]);
  if (controlledProps.role === void 0 && Component !== "nav") {
    controlledProps.role = "navigation";
  }
  let expandClass = `${bsPrefix}-expand`;
  if (typeof expand === "string")
    expandClass = `${expandClass}-${expand}`;
  const navbarContext = (0, import_react14.useMemo)(() => ({
    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),
    bsPrefix,
    expanded: !!expanded,
    expand
  }), [bsPrefix, expanded, expand, onToggle]);
  return (0, import_jsx_runtime16.jsx)(NavbarContext_default.Provider, {
    value: navbarContext,
    children: (0, import_jsx_runtime16.jsx)(SelectableContext_default.Provider, {
      value: handleCollapse,
      children: (0, import_jsx_runtime16.jsx)(Component, __spreadProps(__spreadValues({
        ref
      }, controlledProps), {
        className: (0, import_classnames7.default)(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)
      }))
    })
  });
});
Navbar.defaultProps = defaultProps7;
Navbar.displayName = "Navbar";
var Navbar_default = Object.assign(Navbar, {
  Brand: NavbarBrand_default,
  Collapse: NavbarCollapse_default,
  Offcanvas: NavbarOffcanvas_default,
  Text: NavbarText,
  Toggle: NavbarToggle_default
});

// dep:react-bootstrap_Navbar
var react_bootstrap_Navbar_default = Navbar_default;
export {
  react_bootstrap_Navbar_default as default
};
//# sourceMappingURL=react-bootstrap_Navbar.js.map
