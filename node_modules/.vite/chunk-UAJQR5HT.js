import {
  useButtonProps
} from "./chunk-LD7EQJCT.js";
import {
  useEventCallback
} from "./chunk-4DLB5EML.js";
import {
  require_jsx_runtime
} from "./chunk-NN6QP624.js";
import {
  require_react
} from "./chunk-RGZI4N5W.js";
import {
  __toModule
} from "./chunk-GXEXT4XK.js";

// node_modules/@restart/ui/esm/Anchor.js
var React = __toModule(require_react());

// node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react = __toModule(require_react());

// node_modules/@restart/hooks/esm/useEventListener.js
var import_react2 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react3 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useInterval.js
var import_react4 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useRafInterval.js
var import_react5 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useMergeState.js
var import_react6 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useImage.js
var import_react7 = __toModule(require_react());

// node_modules/@restart/hooks/esm/useResizeObserver.js
var import_react8 = __toModule(require_react());
var targetMap = new WeakMap();

// node_modules/@restart/ui/esm/Anchor.js
var import_jsx_runtime = __toModule(require_jsx_runtime());
var _excluded = ["onKeyDown"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isTrivialHref(href) {
  return !href || href.trim() === "#";
}
var Anchor = React.forwardRef((_ref, ref) => {
  let {
    onKeyDown
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const [buttonProps] = useButtonProps(Object.assign({
    tagName: "a"
  }, props));
  const handleKeyDown = useEventCallback((e) => {
    buttonProps.onKeyDown(e);
    onKeyDown == null ? void 0 : onKeyDown(e);
  });
  if (isTrivialHref(props.href) || props.role === "button") {
    return (0, import_jsx_runtime.jsx)("a", Object.assign({
      ref
    }, props, buttonProps, {
      onKeyDown: handleKeyDown
    }));
  }
  return (0, import_jsx_runtime.jsx)("a", Object.assign({
    ref
  }, props, {
    onKeyDown
  }));
});
Anchor.displayName = "Anchor";
var Anchor_default = Anchor;

export {
  Anchor_default
};
//# sourceMappingURL=chunk-UAJQR5HT.js.map
