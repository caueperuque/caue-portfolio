{
  "version": 3,
  "sources": ["../@emailjs/browser/es/store/store.js", "../@emailjs/browser/es/methods/init/init.js", "../@emailjs/browser/es/utils/validateParams.js", "../@emailjs/browser/es/models/EmailJSResponseStatus.js", "../@emailjs/browser/es/api/sendPost.js", "../@emailjs/browser/es/methods/send/send.js", "../@emailjs/browser/es/methods/sendForm/sendForm.js", "../@emailjs/browser/es/index.js", "dep:@emailjs_browser"],
  "sourcesContent": ["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n", "import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n", "export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n", "export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n", "import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n", "import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.7.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n", "import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.7.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n", "import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n", "import d from \"./node_modules/@emailjs/browser/es/index.js\";export default d;\nexport * from \"./node_modules/@emailjs/browser/es/index.js\""],
  "mappings": ";;;AAAO,IAAM,QAAQ;AAAA,EACjB,SAAS;AAAA;;;ACKN,IAAM,OAAO,CAAC,WAAW,SAAS,8BAA8B;AACnE,QAAM,UAAU;AAChB,QAAM,UAAU;AAAA;;;ACRb,IAAM,iBAAiB,CAAC,WAAW,WAAW,eAAe;AAChE,MAAI,CAAC,WAAW;AACZ,UAAM;AAAA;AAEV,MAAI,CAAC,WAAW;AACZ,UAAM;AAAA;AAEV,MAAI,CAAC,YAAY;AACb,UAAM;AAAA;AAEV,SAAO;AAAA;;;ACVJ,kCAA4B;AAAA,EAC/B,YAAY,cAAc;AACtB,SAAK,SAAS,aAAa;AAC3B,SAAK,OAAO,aAAa;AAAA;AAAA;;;ACD1B,IAAM,WAAW,CAAC,KAAK,MAAM,UAAU,OAAO;AACjD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAM,MAAM,IAAI;AAChB,QAAI,iBAAiB,QAAQ,CAAC,EAAE,aAAa;AACzC,YAAM,iBAAiB,IAAI,sBAAsB;AACjD,UAAI,eAAe,WAAW,OAAO,eAAe,SAAS,MAAM;AAC/D,gBAAQ;AAAA,aAEP;AACD,eAAO;AAAA;AAAA;AAGf,QAAI,iBAAiB,SAAS,CAAC,EAAE,aAAa;AAC1C,aAAO,IAAI,sBAAsB;AAAA;AAErC,QAAI,KAAK,QAAQ,MAAM,UAAU,KAAK;AACtC,WAAO,KAAK,SAAS,QAAQ,CAAC,QAAQ;AAClC,UAAI,iBAAiB,KAAK,QAAQ;AAAA;AAEtC,QAAI,KAAK;AAAA;AAAA;;;ACVV,IAAM,OAAO,CAAC,WAAW,YAAY,eAAe,cAAc;AACrE,QAAM,MAAM,aAAa,MAAM;AAC/B,iBAAe,KAAK,WAAW;AAC/B,QAAM,SAAS;AAAA,IACX,aAAa;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,iBAAiB;AAAA;AAErB,SAAO,SAAS,wBAAwB,KAAK,UAAU,SAAS;AAAA,IAC5D,gBAAgB;AAAA;AAAA;;;ACnBxB,IAAM,eAAe,CAAC,SAAS;AAC3B,MAAI;AACJ,MAAI,OAAO,SAAS,UAAU;AAC1B,kBAAc,SAAS,cAAc;AAAA,SAEpC;AACD,kBAAc;AAAA;AAElB,MAAI,CAAC,eAAe,YAAY,aAAa,QAAQ;AACjD,UAAM;AAAA;AAEV,SAAO;AAAA;AAUJ,IAAM,WAAW,CAAC,WAAW,YAAY,MAAM,cAAc;AAChE,QAAM,MAAM,aAAa,MAAM;AAC/B,QAAM,cAAc,aAAa;AACjC,iBAAe,KAAK,WAAW;AAC/B,QAAM,WAAW,IAAI,SAAS;AAC9B,WAAS,OAAO,eAAe;AAC/B,WAAS,OAAO,cAAc;AAC9B,WAAS,OAAO,eAAe;AAC/B,WAAS,OAAO,WAAW;AAC3B,SAAO,SAAS,6BAA6B;AAAA;;;AC7BjD,IAAO,aAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA;;;ACPwD,IAAO,0BAAQ;",
  "names": []
}
