import {
  require_react
} from "./chunk-RGZI4N5W.js";
import {
  __commonJS,
  __toModule
} from "./chunk-GXEXT4XK.js";

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie = parts.slice(1).join("=");
            if (!json && cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie = (converter.read || converter)(cookie, name) || decode(cookie);
              if (json) {
                try {
                  cookie = JSON.parse(cookie);
                } catch (e) {
                }
              }
              jar[name] = cookie;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
          return get(key, false);
        };
        api.getJSON = function(key) {
          return get(key, true);
        };
        api.remove = function(key, attributes) {
          set(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/react-cookie-consent/dist/react-cookie-consent.esm.js
var import_js_cookie = __toModule(require_js_cookie());
var import_js_cookie2 = __toModule(require_js_cookie());
var import_react = __toModule(require_react());
var ConditionalWrapper = function ConditionalWrapper2(_ref) {
  var condition = _ref.condition, wrapper = _ref.wrapper, children = _ref.children;
  return condition ? wrapper(children) : children;
};
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var POSITION_OPTIONS = {
  TOP: "top",
  BOTTOM: "bottom",
  NONE: "none"
};
var SAME_SITE_OPTIONS;
(function(SAME_SITE_OPTIONS2) {
  SAME_SITE_OPTIONS2["STRICT"] = "strict";
  SAME_SITE_OPTIONS2["LAX"] = "lax";
  SAME_SITE_OPTIONS2["NONE"] = "none";
})(SAME_SITE_OPTIONS || (SAME_SITE_OPTIONS = {}));
var VISIBILITY_OPTIONS = {
  HIDDEN: "hidden",
  SHOW: "show",
  BY_COOKIE_VALUE: "byCookieValue"
};
var defaultCookieConsentName = "CookieConsent";
var _excluded = ["children"];
var DefaultButtonComponent = function DefaultButtonComponent2(_ref) {
  var children = _ref.children, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  return import_react.default.createElement("button", Object.assign({}, props), children);
};
var defaultCookieConsentProps = {
  disableStyles: false,
  hideOnAccept: true,
  hideOnDecline: true,
  location: POSITION_OPTIONS.BOTTOM,
  visible: VISIBILITY_OPTIONS.BY_COOKIE_VALUE,
  onAccept: function onAccept(_acceptedByScrolling) {
  },
  onDecline: function onDecline() {
  },
  cookieName: defaultCookieConsentName,
  cookieValue: "true",
  declineCookieValue: "false",
  setDeclineCookie: true,
  buttonText: "I understand",
  declineButtonText: "I decline",
  debug: false,
  expires: 365,
  containerClasses: "CookieConsent",
  contentClasses: "",
  buttonClasses: "",
  buttonWrapperClasses: "",
  declineButtonClasses: "",
  buttonId: "rcc-confirm-button",
  declineButtonId: "rcc-decline-button",
  extraCookieOptions: {},
  disableButtonStyles: false,
  enableDeclineButton: false,
  flipButtons: false,
  sameSite: SAME_SITE_OPTIONS.LAX,
  ButtonComponent: DefaultButtonComponent,
  overlay: false,
  overlayClasses: "",
  onOverlayClick: function onOverlayClick() {
  },
  acceptOnOverlayClick: false,
  ariaAcceptLabel: "Accept cookies",
  ariaDeclineLabel: "Decline cookies",
  acceptOnScroll: false,
  acceptOnScrollPercentage: 25,
  customContentAttributes: {},
  customContainerAttributes: {},
  customButtonProps: {},
  customDeclineButtonProps: {},
  customButtonWrapperAttributes: {},
  style: {},
  buttonStyle: {},
  declineButtonStyle: {},
  contentStyle: {},
  overlayStyle: {}
};
var defaultState = {
  visible: false,
  style: {
    alignItems: "baseline",
    background: "#353535",
    color: "white",
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "space-between",
    left: "0",
    position: "fixed",
    width: "100%",
    zIndex: "999"
  },
  buttonStyle: {
    background: "#ffd42d",
    border: "0",
    borderRadius: "0px",
    boxShadow: "none",
    color: "black",
    cursor: "pointer",
    flex: "0 0 auto",
    padding: "5px 10px",
    margin: "15px"
  },
  declineButtonStyle: {
    background: "#c12a2a",
    border: "0",
    borderRadius: "0px",
    boxShadow: "none",
    color: "#e5e5e5",
    cursor: "pointer",
    flex: "0 0 auto",
    padding: "5px 10px",
    margin: "15px"
  },
  contentStyle: {
    flex: "1 0 300px",
    margin: "15px"
  },
  overlayStyle: {
    position: "fixed",
    left: 0,
    top: 0,
    width: "100%",
    height: "100%",
    zIndex: "999",
    backgroundColor: "rgba(0,0,0,0.3)"
  }
};
var getCookieConsentValue = function getCookieConsentValue2(name) {
  if (name === void 0) {
    name = defaultCookieConsentName;
  }
  var cookieValue = import_js_cookie.default.get(name);
  if (cookieValue === void 0) {
    return import_js_cookie.default.get(getLegacyCookieName(name));
  }
  return cookieValue;
};
var resetCookieConsentValue = function resetCookieConsentValue2(name) {
  if (name === void 0) {
    name = defaultCookieConsentName;
  }
  import_js_cookie.default.remove(name);
};
var getLegacyCookieName = function getLegacyCookieName2(name) {
  return name + "-legacy";
};
var CookieConsent = function(_Component) {
  _inheritsLoose(CookieConsent2, _Component);
  function CookieConsent2() {
    var _this;
    _this = _Component.apply(this, arguments) || this;
    _this.state = defaultState;
    _this.handleScroll = function() {
      var acceptOnScrollPercentage = _this.props.acceptOnScrollPercentage;
      var rootNode = document.documentElement;
      var body = document.body;
      var top = "scrollTop";
      var height = "scrollHeight";
      var percentage = (rootNode[top] || body[top]) / ((rootNode[height] || body[height]) - rootNode.clientHeight) * 100;
      if (percentage > acceptOnScrollPercentage) {
        _this.accept(true);
      }
    };
    _this.removeScrollListener = function() {
      var acceptOnScroll = _this.props.acceptOnScroll;
      if (acceptOnScroll) {
        window.removeEventListener("scroll", _this.handleScroll);
      }
    };
    return _this;
  }
  var _proto = CookieConsent2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var debug = this.props.debug;
    if (this.getCookieValue() === void 0 || debug) {
      this.setState({
        visible: true
      });
      if (this.props.acceptOnScroll) {
        window.addEventListener("scroll", this.handleScroll, {
          passive: true
        });
      }
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeScrollListener();
  };
  _proto.accept = function accept(acceptedByScrolling) {
    var _acceptedByScrolling;
    if (acceptedByScrolling === void 0) {
      acceptedByScrolling = false;
    }
    var _this$props = this.props, cookieName = _this$props.cookieName, cookieValue = _this$props.cookieValue, hideOnAccept = _this$props.hideOnAccept, onAccept2 = _this$props.onAccept;
    this.setCookie(cookieName, cookieValue);
    onAccept2((_acceptedByScrolling = acceptedByScrolling) != null ? _acceptedByScrolling : false);
    if (hideOnAccept) {
      this.setState({
        visible: false
      });
      this.removeScrollListener();
    }
  };
  _proto.overlayClick = function overlayClick() {
    var _this$props2 = this.props, acceptOnOverlayClick = _this$props2.acceptOnOverlayClick, onOverlayClick2 = _this$props2.onOverlayClick;
    if (acceptOnOverlayClick) {
      this.accept();
    }
    onOverlayClick2();
  };
  _proto.decline = function decline() {
    var _this$props3 = this.props, cookieName = _this$props3.cookieName, declineCookieValue = _this$props3.declineCookieValue, hideOnDecline = _this$props3.hideOnDecline, onDecline2 = _this$props3.onDecline, setDeclineCookie = _this$props3.setDeclineCookie;
    if (setDeclineCookie) {
      this.setCookie(cookieName, declineCookieValue);
    }
    onDecline2();
    if (hideOnDecline) {
      this.setState({
        visible: false
      });
    }
  };
  _proto.setCookie = function setCookie(cookieName, cookieValue) {
    var _this$props4 = this.props, extraCookieOptions = _this$props4.extraCookieOptions, expires = _this$props4.expires, sameSite = _this$props4.sameSite;
    var cookieSecurity = this.props.cookieSecurity;
    if (cookieSecurity === void 0) {
      cookieSecurity = window.location ? window.location.protocol === "https:" : true;
    }
    var cookieOptions = _extends({
      expires
    }, extraCookieOptions, {
      sameSite,
      secure: cookieSecurity
    });
    if (sameSite === SAME_SITE_OPTIONS.NONE) {
      import_js_cookie.default.set(getLegacyCookieName(cookieName), cookieValue, cookieOptions);
    }
    import_js_cookie.default.set(cookieName, cookieValue, cookieOptions);
  };
  _proto.getCookieValue = function getCookieValue() {
    var cookieName = this.props.cookieName;
    return getCookieConsentValue(cookieName);
  };
  _proto.render = function render() {
    var _this2 = this;
    switch (this.props.visible) {
      case VISIBILITY_OPTIONS.HIDDEN:
        return null;
      case VISIBILITY_OPTIONS.BY_COOKIE_VALUE:
        if (!this.state.visible) {
          return null;
        }
        break;
    }
    var _this$props5 = this.props, location = _this$props5.location, style = _this$props5.style, buttonStyle = _this$props5.buttonStyle, declineButtonStyle = _this$props5.declineButtonStyle, contentStyle = _this$props5.contentStyle, disableStyles = _this$props5.disableStyles, buttonText = _this$props5.buttonText, declineButtonText = _this$props5.declineButtonText, containerClasses = _this$props5.containerClasses, contentClasses = _this$props5.contentClasses, buttonClasses = _this$props5.buttonClasses, buttonWrapperClasses = _this$props5.buttonWrapperClasses, declineButtonClasses = _this$props5.declineButtonClasses, buttonId = _this$props5.buttonId, declineButtonId = _this$props5.declineButtonId, disableButtonStyles = _this$props5.disableButtonStyles, enableDeclineButton = _this$props5.enableDeclineButton, flipButtons = _this$props5.flipButtons, ButtonComponent = _this$props5.ButtonComponent, overlay = _this$props5.overlay, overlayClasses = _this$props5.overlayClasses, overlayStyle = _this$props5.overlayStyle, ariaAcceptLabel = _this$props5.ariaAcceptLabel, ariaDeclineLabel = _this$props5.ariaDeclineLabel, customContainerAttributes = _this$props5.customContainerAttributes, customContentAttributes = _this$props5.customContentAttributes, customButtonProps = _this$props5.customButtonProps, customDeclineButtonProps = _this$props5.customDeclineButtonProps, customButtonWrapperAttributes = _this$props5.customButtonWrapperAttributes;
    var myStyle = {};
    var myButtonStyle = {};
    var myDeclineButtonStyle = {};
    var myContentStyle = {};
    var myOverlayStyle = {};
    if (disableStyles) {
      myStyle = Object.assign({}, style);
      myButtonStyle = Object.assign({}, buttonStyle);
      myDeclineButtonStyle = Object.assign({}, declineButtonStyle);
      myContentStyle = Object.assign({}, contentStyle);
      myOverlayStyle = Object.assign({}, overlayStyle);
    } else {
      myStyle = Object.assign({}, _extends({}, this.state.style, style));
      myContentStyle = Object.assign({}, _extends({}, this.state.contentStyle, contentStyle));
      myOverlayStyle = Object.assign({}, _extends({}, this.state.overlayStyle, overlayStyle));
      if (disableButtonStyles) {
        myButtonStyle = Object.assign({}, buttonStyle);
        myDeclineButtonStyle = Object.assign({}, declineButtonStyle);
      } else {
        myButtonStyle = Object.assign({}, _extends({}, this.state.buttonStyle, buttonStyle));
        myDeclineButtonStyle = Object.assign({}, _extends({}, this.state.declineButtonStyle, declineButtonStyle));
      }
    }
    switch (location) {
      case POSITION_OPTIONS.TOP:
        myStyle.top = "0";
        break;
      case POSITION_OPTIONS.BOTTOM:
        myStyle.bottom = "0";
        break;
    }
    var buttonsToRender = [];
    enableDeclineButton && buttonsToRender.push(import_react.default.createElement(ButtonComponent, Object.assign({
      key: "declineButton",
      style: myDeclineButtonStyle,
      className: declineButtonClasses,
      id: declineButtonId,
      "aria-label": ariaDeclineLabel,
      onClick: function onClick() {
        _this2.decline();
      }
    }, customDeclineButtonProps), declineButtonText));
    buttonsToRender.push(import_react.default.createElement(ButtonComponent, Object.assign({
      key: "acceptButton",
      style: myButtonStyle,
      className: buttonClasses,
      id: buttonId,
      "aria-label": ariaAcceptLabel,
      onClick: function onClick() {
        _this2.accept();
      }
    }, customButtonProps), buttonText));
    if (flipButtons) {
      buttonsToRender.reverse();
    }
    return import_react.default.createElement(ConditionalWrapper, {
      condition: overlay,
      wrapper: function wrapper(children) {
        return import_react.default.createElement("div", {
          style: myOverlayStyle,
          className: overlayClasses,
          onClick: function onClick() {
            _this2.overlayClick();
          }
        }, children);
      }
    }, import_react.default.createElement("div", Object.assign({
      className: "" + containerClasses,
      style: myStyle
    }, customContainerAttributes), import_react.default.createElement("div", Object.assign({
      style: myContentStyle,
      className: contentClasses
    }, customContentAttributes), this.props.children), import_react.default.createElement("div", Object.assign({
      className: "" + buttonWrapperClasses
    }, customButtonWrapperAttributes), buttonsToRender.map(function(button) {
      return button;
    }))));
  };
  return CookieConsent2;
}(import_react.Component);
CookieConsent.defaultProps = defaultCookieConsentProps;
var react_cookie_consent_esm_default = CookieConsent;

// dep:react-cookie-consent
var react_cookie_consent_default = react_cookie_consent_esm_default;
var export_Cookies = import_js_cookie2.default;
export {
  ConditionalWrapper,
  CookieConsent,
  export_Cookies as Cookies,
  POSITION_OPTIONS as OPTIONS,
  POSITION_OPTIONS,
  SAME_SITE_OPTIONS,
  VISIBILITY_OPTIONS,
  VISIBILITY_OPTIONS as VISIBLE_OPTIONS,
  react_cookie_consent_default as default,
  defaultCookieConsentName,
  getCookieConsentValue,
  getLegacyCookieName,
  resetCookieConsentValue
};
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
//# sourceMappingURL=react-cookie-consent.js.map
